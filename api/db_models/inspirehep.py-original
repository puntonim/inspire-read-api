# Generated on 2018.10.14 with
# $ ./manage.py inspectdb --database inspirehep > inspirehep.py

# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccessActionsroles(models.Model):
    action = models.CharField(max_length=80, blank=True, null=True)
    exclude = models.BooleanField()
    argument = models.CharField(max_length=255, blank=True, null=True)
    role = models.ForeignKey('AccountsRole', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'access_actionsroles'
        unique_together = (('action', 'exclude', 'argument', 'role'),)


class AccessActionssystemroles(models.Model):
    action = models.CharField(max_length=80, blank=True, null=True)
    exclude = models.BooleanField()
    argument = models.CharField(max_length=255, blank=True, null=True)
    role_name = models.CharField(max_length=40)

    class Meta:
        managed = False
        db_table = 'access_actionssystemroles'
        unique_together = (('action', 'exclude', 'argument', 'role_name'),)


class AccessActionsusers(models.Model):
    action = models.CharField(max_length=80, blank=True, null=True)
    exclude = models.BooleanField()
    argument = models.CharField(max_length=255, blank=True, null=True)
    user = models.ForeignKey('AccountsUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'access_actionsusers'
        unique_together = (('action', 'exclude', 'argument', 'user'),)


class AccountsRole(models.Model):
    name = models.CharField(unique=True, max_length=80, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'accounts_role'


class AccountsUser(models.Model):
    email = models.CharField(unique=True, max_length=255, blank=True, null=True)
    password = models.CharField(max_length=255, blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    confirmed_at = models.DateTimeField(blank=True, null=True)
    last_login_at = models.DateTimeField(blank=True, null=True)
    current_login_at = models.DateTimeField(blank=True, null=True)
    last_login_ip = models.CharField(max_length=50, blank=True, null=True)
    current_login_ip = models.CharField(max_length=50, blank=True, null=True)
    login_count = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'accounts_user'


class AccountsUserSessionActivity(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    sid_s = models.CharField(primary_key=True, max_length=255)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)
    browser = models.CharField(max_length=80, blank=True, null=True)
    browser_version = models.CharField(max_length=30, blank=True, null=True)
    country = models.CharField(max_length=3, blank=True, null=True)
    device = models.CharField(max_length=80, blank=True, null=True)
    ip = models.CharField(max_length=80, blank=True, null=True)
    os = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'accounts_user_session_activity'


class AccountsUserrole(models.Model):
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)
    role = models.ForeignKey(AccountsRole, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'accounts_userrole'


class AlembicVersion(models.Model):
    version_num = models.CharField(primary_key=True, max_length=32)

    class Meta:
        managed = False
        db_table = 'alembic_version'


class Collection(models.Model):
    name = models.CharField(unique=True, max_length=255)
    dbquery = models.TextField(blank=True, null=True)
    rgt = models.IntegerField()
    lft = models.IntegerField()
    level = models.IntegerField()
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    tree_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'collection'


class FilesBucket(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    id = models.UUIDField(primary_key=True)
    default_location = models.ForeignKey('FilesLocation', models.DO_NOTHING, db_column='default_location')
    default_storage_class = models.CharField(max_length=1)
    size = models.BigIntegerField()
    quota_size = models.BigIntegerField(blank=True, null=True)
    max_file_size = models.BigIntegerField(blank=True, null=True)
    locked = models.BooleanField()
    deleted = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'files_bucket'


class FilesBuckettags(models.Model):
    bucket = models.ForeignKey(FilesBucket, models.DO_NOTHING, primary_key=True)
    key = models.CharField(max_length=255)
    value = models.TextField()

    class Meta:
        managed = False
        db_table = 'files_buckettags'
        unique_together = (('bucket', 'key'),)


class FilesFiles(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    id = models.UUIDField(primary_key=True)
    uri = models.TextField(unique=True, blank=True, null=True)
    storage_class = models.CharField(max_length=1, blank=True, null=True)
    size = models.BigIntegerField(blank=True, null=True)
    checksum = models.CharField(max_length=255, blank=True, null=True)
    readable = models.BooleanField()
    writable = models.BooleanField()
    last_check_at = models.DateTimeField(blank=True, null=True)
    last_check = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'files_files'


class FilesLocation(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    name = models.CharField(unique=True, max_length=20)
    uri = models.CharField(max_length=255)
    default = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'files_location'


class FilesMultipartobject(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    upload_id = models.UUIDField(primary_key=True)
    bucket = models.ForeignKey(FilesBucket, models.DO_NOTHING, blank=True, null=True)
    key = models.TextField(blank=True, null=True)
    file = models.ForeignKey(FilesFiles, models.DO_NOTHING)
    chunk_size = models.IntegerField(blank=True, null=True)
    size = models.BigIntegerField(blank=True, null=True)
    completed = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'files_multipartobject'
        unique_together = (('upload_id', 'bucket', 'key'),)


class FilesMultipartobjectPart(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    upload = models.ForeignKey(FilesMultipartobject, models.DO_NOTHING, primary_key=True)
    part_number = models.IntegerField()
    checksum = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'files_multipartobject_part'
        unique_together = (('upload', 'part_number'),)


class FilesObject(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    bucket = models.ForeignKey(FilesBucket, models.DO_NOTHING, primary_key=True)
    key = models.TextField()
    version_id = models.UUIDField()
    file = models.ForeignKey(FilesFiles, models.DO_NOTHING, blank=True, null=True)
    field_mimetype = models.CharField(db_column='_mimetype', max_length=255, blank=True, null=True)  # Field renamed because it started with '_'.
    is_head = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'files_object'
        unique_together = (('bucket', 'key', 'version_id'),)


class LegacyRecordsMirror(models.Model):
    recid = models.AutoField(primary_key=True)
    last_updated = models.DateTimeField()
    marcxml = models.BinaryField()
    valid = models.BooleanField(blank=True, null=True)
    errors = models.TextField(blank=True, null=True)
    collection = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'legacy_records_mirror'


class OauthclientRemoteaccount(models.Model):
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING)
    client_id = models.CharField(max_length=255)
    extra_data = models.TextField()  # This field type is a guess.
    created = models.DateTimeField()
    updated = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'oauthclient_remoteaccount'
        unique_together = (('user', 'client_id'),)


class OauthclientRemotetoken(models.Model):
    id_remote_account = models.ForeignKey(OauthclientRemoteaccount, models.DO_NOTHING, db_column='id_remote_account', primary_key=True)
    token_type = models.CharField(max_length=40)
    access_token = models.BinaryField()
    secret = models.TextField()
    created = models.DateTimeField()
    updated = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'oauthclient_remotetoken'
        unique_together = (('id_remote_account', 'token_type'),)


class OauthclientUseridentity(models.Model):
    id = models.CharField(primary_key=True, max_length=255)
    method = models.CharField(max_length=255)
    id_user = models.ForeignKey(AccountsUser, models.DO_NOTHING, db_column='id_user')
    created = models.DateTimeField()
    updated = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'oauthclient_useridentity'
        unique_together = (('id', 'method'), ('id_user', 'method'),)


class PidstorePid(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    pid_type = models.CharField(max_length=6)
    pid_value = models.CharField(max_length=255)
    pid_provider = models.CharField(max_length=8, blank=True, null=True)
    status = models.CharField(max_length=1)
    object_type = models.CharField(max_length=3, blank=True, null=True)
    object_uuid = models.UUIDField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pidstore_pid'
        unique_together = (('pid_type', 'pid_value'),)


class PidstoreRecid(models.Model):
    recid = models.BigAutoField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'pidstore_recid'


class PidstoreRedirect(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    id = models.UUIDField(primary_key=True)
    pid = models.ForeignKey(PidstorePid, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'pidstore_redirect'


class RecordsBuckets(models.Model):
    record = models.ForeignKey('RecordsMetadata', models.DO_NOTHING, primary_key=True)
    bucket = models.ForeignKey(FilesBucket, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'records_buckets'
        unique_together = (('record', 'bucket'),)


class RecordsMetadata(models.Model):
    created = models.DateTimeField()
    updated = models.DateTimeField()
    id = models.UUIDField(primary_key=True)
    json = models.TextField(blank=True, null=True)  # This field type is a guess.
    version_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'records_metadata'


class RecordsMetadataVersion(models.Model):
    created = models.DateTimeField(blank=True, null=True)
    updated = models.DateTimeField(blank=True, null=True)
    id = models.UUIDField(primary_key=True)
    json = models.TextField(blank=True, null=True)  # This field type is a guess.
    version_id = models.IntegerField(blank=True, null=True)
    transaction_id = models.BigIntegerField()
    end_transaction_id = models.BigIntegerField(blank=True, null=True)
    operation_type = models.SmallIntegerField()

    class Meta:
        managed = False
        db_table = 'records_metadata_version'
        unique_together = (('id', 'transaction_id'),)


class Transaction(models.Model):
    issued_at = models.DateTimeField(blank=True, null=True)
    id = models.BigIntegerField(primary_key=True)
    remote_addr = models.CharField(max_length=50, blank=True, null=True)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'transaction'


class UserprofilesUserprofile(models.Model):
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, primary_key=True)
    username = models.CharField(unique=True, max_length=255, blank=True, null=True)
    displayname = models.CharField(max_length=255, blank=True, null=True)
    full_name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'userprofiles_userprofile'


class WorkflowsAuditLogging(models.Model):
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)
    score = models.FloatField()
    user_action = models.TextField()
    decision = models.TextField()
    source = models.TextField()
    action = models.TextField()
    created = models.DateTimeField()
    object = models.ForeignKey('WorkflowsObject', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'workflows_audit_logging'


class WorkflowsObject(models.Model):
    data = models.TextField()  # This field type is a guess.
    extra_data = models.TextField()  # This field type is a guess.
    id_workflow = models.ForeignKey('WorkflowsWorkflow', models.DO_NOTHING, db_column='id_workflow', blank=True, null=True)
    status = models.IntegerField()
    id_parent = models.ForeignKey('self', models.DO_NOTHING, db_column='id_parent', blank=True, null=True)
    id_user = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    data_type = models.CharField(max_length=150, blank=True, null=True)
    callback_pos = models.TextField(blank=True, null=True)  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'workflows_object'


class WorkflowsPendingRecord(models.Model):
    workflow = models.ForeignKey(WorkflowsObject, models.DO_NOTHING, primary_key=True)
    record_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'workflows_pending_record'


class WorkflowsRecordSources(models.Model):
    source = models.TextField()  # This field type is a guess.
    record_uuid = models.ForeignKey(RecordsMetadata, models.DO_NOTHING, db_column='record_uuid', primary_key=True)
    json = models.TextField(blank=True, null=True)  # This field type is a guess.
    created = models.DateTimeField(blank=True, null=True)
    updated = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'workflows_record_sources'
        unique_together = (('record_uuid', 'source'),)


class WorkflowsWorkflow(models.Model):
    uuid = models.UUIDField(primary_key=True)
    name = models.CharField(max_length=255)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    id_user = models.IntegerField()
    extra_data = models.TextField()  # This field type is a guess.
    status = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'workflows_workflow'
